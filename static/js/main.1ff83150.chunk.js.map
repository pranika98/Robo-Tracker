{"version":3,"sources":["serviceWorker.js","Card.js","robots.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundry.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","robots","username","CardList","cardComp","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onsearch","event","target","value","fetch","then","response","json","users","console","log","filterrobo","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1ff83150.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) => {\n    // const {name,email} = props;\n    return (\n        <div className='tc bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\n        <img alt='Robots' src= {`https://robohash.org/${props.id}11?200x200`}/>\n        <div>\n            <h2>{ props.name} </h2>\n            <p> {props.email}</p>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Card;","export const robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@gmail.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@vlah.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yahoo.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@reddit.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@Casper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rose.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@donna.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@rachel.biz'\n    }\n  ];\n  ","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList=({robots}) => {\n    const cardComp=robots.map((user,i) => {\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n    })\n    return(\n        <div>\n        {cardComp}\n        </div>\n     \n    );\n}\n\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox=({searchfield,searchChange})=>{\n    return(\n        <div className='pa2 tc'>\n        <input \n        className='tc bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5' \n        type='search' \n        placeholder='search robots'\n        onChange={searchChange}\n        />\n        </div>\n    )\n}\n\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (props) =>{\n    return(\n      \n<div style={{overflowY:'scroll' , border : '1px solid black ', height:'800px'}}>\n{props.children}           \n</div>\n       \n    )\n}\n\nexport default Scroll;","import React,{Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError : true})\n\n    }\n    render(){\n        if(this.state.hasError){\n            return <h1> OOPSSS. An error occured</h1>\n        }\n        return this.props.children;\n      \n    }\n}\n\n\nexport default ErrorBoundry;","import React,{Component}from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport {robots} from './robots';\nimport './App.css'\nimport Scroll from './Scroll';\nimport ErrorBoundry from './ErrorBoundry';\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state={\n            robots : [],\n            searchfield : ''    \n\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users').then(response =>{\n            return response.json()\n        })\n        .then(users => {\n            this.setState({robots:robots});\n        })\n       \n        console.log('constructor')\n    }\n\n    onsearch = (event) => {\n       this.setState({searchfield: event.target.value})\n        // console.log(filterrobo);\n    }\n\n    render(){\n        const filterrobo=this.state.robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        })\n        if(robots.length===0 ){\n            return <h1> Loading .... </h1>\n        }\n\n        else\n        return(\n            <div className='tc'>\n                <h1 className= 'tc grow f2' > ROBO TRACKER</h1>\n                <SearchBox searchChange={this.onsearch}/>\n                <Scroll>\n                <ErrorBoundry>\n                <CardList robots={filterrobo}/>\n                </ErrorBoundry>\n                </Scroll>\n            </div>\n        )\n\n    }\n    \n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Card from './Card';\nimport 'tachyons';\nimport {robots }from './robots';\n// import CardList from './CardList';\nimport App from './App.js';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}